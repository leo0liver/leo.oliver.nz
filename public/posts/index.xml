<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Leo Oliver</title>
        <link>https://oliver.nz/posts/</link>
        <description>Recent content in Posts on Leo Oliver</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>NZ</copyright>
        <lastBuildDate>Thu, 16 Sep 2021 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://oliver.nz/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Blogging with org-mode and hugo</title>
            <link>https://oliver.nz/posts/2021/09/blogging-with-org-mode-and-hugo/</link>
            <pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate>
            
            <guid>https://oliver.nz/posts/2021/09/blogging-with-org-mode-and-hugo/</guid>
            <description>Once you are far down the path of using emacs and org-mode, it feels wasteful to learn a whole new scheme for generating text. As much as I love markdown, I would much rather put my muscle memory to use keeping my content in org-mode files. This thinking took me to the excellent org-mode extension ox-hugo. This module allows you to keep your content in a monolithic org file and simply exports neatly to the markdown that hugo expects.</description>
            <content type="html"><![CDATA[<p>Once you are far down the path of using emacs and org-mode, it feels wasteful to
learn a whole new scheme for generating text. As much as I love markdown, I
would much rather put my muscle memory to use keeping my content in org-mode
files. This thinking took me to the excellent org-mode extension <a href="https://ox-hugo.scripter.co/">ox-hugo</a>. This
module allows you to keep your content in a monolithic org file and simply
exports neatly to the markdown that hugo expects.</p>
<h2 id="installation">Installation</h2>
<p>Installing ox-hugo is pretty trivial. I am using <a href="https://github.com/hlissner/doom-emacs">Doom Emacs</a> so enabling ox-hugo
is as simple as adding the following to your init.el:</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(doom! <span style="color:#fff;font-weight:bold">:lang</span>
</span></span><span style="display:flex;"><span>       (org +hugo))</span></span></code></pre></div>
<p>Run a doom sync and you will be good to go.</p>
<p>If you are using a more vanilla emacs, you just need the following to load
ox-hugo with the popular <code>use-package</code> macro:</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(<span style="color:#fff;font-weight:bold">use-package</span> ox-hugo
</span></span><span style="display:flex;"><span>  <span style="color:#fff;font-weight:bold">:ensure</span> t
</span></span><span style="display:flex;"><span>  <span style="color:#fff;font-weight:bold">:after</span> ox)</span></span></code></pre></div>
<p>Note that this assumes you already have org mode installed. For more on that see
<a href="https://orgmode.org/install.html">here</a>.</p>
<h2 id="content">Content</h2>
<p>The content is all stored in a monolithic org-mode document and is exported to
markdown suitable for processing by hugo with a regular export command. There&rsquo;s
a few things to note about the structure of this org-mode doc.</p>
<p><em>Note that the raw org file can be seen <a href="https://raw.githubusercontent.com/carlf/carlf.github.io/main/posts.org">here</a>.</em></p>
<p>First, the document starts with some key configuration.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-org" data-lang="org"><span style="display:flex;"><span><span style="color:#007f7f">#+HUGO_BASE_DIR</span><span style="color:#007f7f">: ~/repos/carlf.github.io</span>
</span></span><span style="display:flex;"><span><span style="color:#007f7f">#+HUGO_SECTION</span><span style="color:#007f7f">: posts</span>
</span></span><span style="display:flex;"><span><span style="color:#007f7f">#+HUGO_CODE_FENCE</span><span style="color:#007f7f">: nil</span></span></span></code></pre></div>
<p>This configures ox-hugo by telling it where the markdown should be exported to,
what section the top-level headings should be exported to, and to use the
highlight shortcode rather than the triple-backtick code fence. Since my blog is
configured using the default code highlighter, I went with <code>nil</code> here but you
could just as easily set it to <code>t</code>.</p>
<p>Second, each post has some front matter that configures the metadata on export.
Let&rsquo;s take a look at the beginning of this particular org doc.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-org" data-lang="org"><span style="display:flex;"><span><span style="font-weight:bold">*</span><span style="font-weight:bold"> Hugo</span> :@hugo:
</span></span><span style="display:flex;"><span><span style="font-weight:bold">**</span> Blogging with org-mode and hugo :org:hugo:emacs:
</span></span><span style="display:flex;"><span><span style="color:#007f7f">:PROPERTIES:
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span><span style="color:#007f7f">:EXPORT_FILE_NAME: blogging_with_org_and_hugo
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f">:EXPORT_DATE: 2021-09-14
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f">:ID:       40dc81ff-8c52-482b-a2f0-7e1d1f4f583d
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span><span style="color:#007f7f">:END:</span></span></span></code></pre></div>
<p>The top level heading sets the category of the posts under it. In this case, the
category is hugo. The tag on the heading is what sets the category. Next we have
the second level heading which sets the name of the post and the tags associated
with it. In this case I am setting the tags org, hugo, and emacs. Then the
properties set the file name of the exported markdown and the publish date. The
ID field is particularly useful for linking between pages. If you make a link to
an ID in your org document, that is automatically translated to a link the
appropriate exported page by ox-hugo.</p>
<h2 id="export">Export</h2>
<p>Once you have your post ready to go, you still need to export to markdown so
hugo can process your posts. I usually do this while running <code>hugo serve</code> so I
can look at my exported posts as I work. To export with ox-hugo, you can go to
the export dispatch menu. In doom emacs this is via <code>SPC m e</code>. In regular emacs,
this would be via <code>C-c C-e</code>. In either case you will hit <code>H A</code> to export all
posts from your file.</p>
<p>Let&rsquo;s take a look a the header of the file generated by this post.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>+++
</span></span><span style="display:flex;"><span>title = &#34;Blogging with org-mode and hugo&#34;
</span></span><span style="display:flex;"><span>author = [&#34;Carl Flippin&#34;]
</span></span><span style="display:flex;"><span>date = 2021-09-14
</span></span><span style="display:flex;"><span>tags = [&#34;org&#34;, &#34;hugo&#34;, &#34;emacs&#34;]
</span></span><span style="display:flex;"><span>categories = [&#34;hugo&#34;]
</span></span><span style="display:flex;"><span>draft = false
</span></span><span style="display:flex;"><span>+++</span></span></code></pre></div>
<p>As you can see, all the frontmatter you would expect from the discussion above
is there. One note on the draft status. If the top level heading for a post is a
<code>TODO</code> ox-hugo will mark it as a draft. If it has no status or the status is
done, it will be posted with draft set to false.</p>
<h2 id="hosting">Hosting</h2>
<p>After you export, you are ready to host your site. If you want to do it
manually, you just need to run hugo to generate your HTML and put it on your web
server. For a simpler, hosting experience, you probably want to check out Github
Actions and Github Pages or maybe a service like Netlify to make the build and
deploy process more automatic. For this blog, I am using Github Actions and
Github Pages with a dash of Cloudflare as a CDN but that is the subject of
another post.</p>
]]></content>
        </item>
        
    </channel>
</rss>
